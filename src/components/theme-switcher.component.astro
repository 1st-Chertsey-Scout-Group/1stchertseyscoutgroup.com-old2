<theme-switcher>
  <button id="theme-toggle" type="button">
    <svg
      id="theme-toggle-dark-icon"
      fill="currentColor"
      viewBox="0 0 20 20"
      xmlns="http://www.w3.org/2000/svg"
      class="hidden"
    >
      <path
        d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
      ></path>
    </svg>
    <svg
      id="theme-toggle-light-icon"
      fill="currentColor"
      viewBox="0 0 20 20"
      xmlns="http://www.w3.org/2000/svg"
      class="hidden"
    >
      <path
        d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
        fill-rule="evenodd"
        clip-rule="evenodd"></path>
    </svg>
  </button>
</theme-switcher>

<style>
  button {
    @apply text-sm p-2.5;
  }

  button svg {
    @apply w-5 h-5;
  }
</style>

<script>
  class ThemeSwitcher extends HTMLElement {
    themeToggleDarkIcon: HTMLElement;
    themeToggleLightIcon: HTMLElement;
    themeToggleBtn: HTMLElement;

    constructor() {
      super();

      var themeToggleDarkIcon = document.getElementById(
        "theme-toggle-dark-icon"
      );

      var themeToggleLightIcon = document.getElementById(
        "theme-toggle-light-icon"
      );

      var themeToggleBtn = document.getElementById("theme-toggle");

      if (!themeToggleDarkIcon) {
        throw new Error(
          "Theme Switcher: SETUP ERROR - '#theme-toggle-dark-icon' not found"
        );
      }

      if (!themeToggleLightIcon) {
        throw new Error(
          "Theme Switcher: SETUP ERROR - '#theme-toggle-light-icon' not found"
        );
      }

      if (!themeToggleBtn) {
        throw new Error(
          "Theme Switcher: SETUP ERROR - '#theme-toggle' not found"
        );
      }

      this.themeToggleLightIcon = themeToggleLightIcon;
      this.themeToggleDarkIcon = themeToggleDarkIcon;
      this.themeToggleBtn = themeToggleBtn;
    }

    connectedCallback() {
      let hasPreference = "color-theme" in localStorage;

      let colourTheme = this.getTheme();
      let prefersDarkScheme = window.matchMedia(
        "(prefers-color-scheme: dark)"
      ).matches;

      if (colourTheme === "dark" || (!hasPreference && prefersDarkScheme)) {
        this.themeToggleLightIcon.classList.remove("hidden");
        document.documentElement.classList.add("dark");
        this.setTheme("dark");
      } else {
        this.themeToggleDarkIcon.classList.remove("hidden");
        document.documentElement.classList.remove("dark");
        this.setTheme("light");
      }

      this.themeToggleBtn.addEventListener("click", () =>
        this.onToggleClicked()
      );
    }

    onToggleClicked() {
      // toggle icons inside button
      this.themeToggleDarkIcon.classList.toggle("hidden");
      this.themeToggleLightIcon.classList.toggle("hidden");

      const theme = this.getTheme();

      if (theme === "light") {
        document.documentElement.classList.add("dark");
        localStorage.setItem("color-theme", "dark");
      } else {
        document.documentElement.classList.remove("dark");
        localStorage.setItem("color-theme", "light");
      }
    }

    getTheme(): "light" | "dark" {
      const theme = localStorage.getItem("color-theme");

      if (theme == "light") {
        return "light";
      } else if (theme == "dark") {
        return "dark";
      } else {
        throw new Error("UNKNOWN THEME: " + theme);
      }
    }

    setTheme(theme: "light" | "dark") {
      return localStorage.setItem("color-theme", theme);
    }
  }

  customElements.define("theme-switcher", ThemeSwitcher);
</script>
